package esercizio1;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class DepositoDati {
	
	private Connect conn = null;
	
	private List<RowTableProjects> getRowTableProjects(String sql, Vector<String> v) {
		conn = new Connect();
		
		List<RowTableProjects> ret = new ArrayList<RowTableProjects>();
		
		List<Vector<Object>> resultSet;
		
		if(v != null)
			resultSet = conn.query(sql, 6, v);
		else
			resultSet = conn.query(sql, 6);
		
		for(int i = 0; i < resultSet.size(); i++) {
			Vector<Object> val = resultSet.get(i);
			
			RowTableProjects row = new RowTableProjects( (int)val.get(0), 
														val.get(1).toString(), 
														val.get(2).toString(), 
														(int)val.get(3), 
														(int)val.get(4), 
														val.get(5).toString()
														); 
			ret.add(row);
		}

		conn.close();
		return ret;		
	}
	
	public DepositoDati() {
		
	}
	
	
	public List<RowTableProjects> getProjects(String agencyName){
		String sqlStr = "select f1.id_project, f1.nome, f1.budget, max(f1.stake) as stake, f1.azienda\n" + 
				"from  (\n" + 
				"select p.id as id_project, p.nome, p.budget, case when f.azienda = ? then f.budget else 0 end as stake, p.azienda\n" + 
				"from finanziamento f right outer join progetto p on f.progetto = p.id\n" + 
				"order by stake desc\n" + 
				"    ) as f1\n" + 
				"group by f1.id_project";
		
		Vector<String> d = new Vector<String>();		
		d.add(agencyName);
		
		List<RowTableProjects> ret = getRowTableProjects(sqlStr, d);
		
		return ret;
	}
	
	public int getSommaStakes(int selectedProjectID){		
		String sql="SELECT sum(f.budget) as somma "
		  		+ "FROM finanziamento f  "
				+" WHERE f.progetto="+ selectedProjectID +";"
				;
		
		conn = new Connect();
		
		List<Vector<Object>> val = conn.query(sql, 1);
		
		conn.close();
		
		return (int)val.get(0).get(0);
	}
	
	public double getProgress(int id_progetto)
	{
		String sql="SELECT (sum(f.budget)/p.budget)*100 as progresso "
		  		+ "FROM progetto p inner join finanziamento f on p.id=f.progetto "
				+" WHERE p.id="+ id_progetto +";"
				;
		conn = new Connect();
		
		List<Vector<Object>> val = conn.query(sql, 1);
		
		conn.close();
		
		return Double.valueOf(val.get(0).get(0).toString());
		
	}
	
	public List<RowTableProjects> getProjectsWithoutStake(){
		String sqlStr =" select p.id as id_project, p.nome, case when d.id_project is null then 0 else d.progress end as progress, 0 as stake, p.budget,p.azienda\n" + 
				"from progetto p left outer join (\n" + 
				"select	p.id as id_project, p.nome as nome,(sum(f.budget)/p.budget)*100 as progress, p.budget, p.azienda\n" + 
				"				from	progetto as p \n" + 
				"						inner join \n" + 
				"				        finanziamento as f \n" + 
				"				        on p.id = f.progetto\n" + 
				"				group by f.progetto) as d on d.id_project=p.id;";
	
		return getRowTableProjects(sqlStr, null);
	}
	
	public void insertProject(Vector<String>val) {
	  String insertProject="INSERT INTO progetto (nome,budget,descrizione,azienda) values ((?),(?),(?),(?))";
	   
	  Connect conn = new Connect();
	  
	  conn.query(insertProject, 0, val);
	  
	  conn.close();
	}
	
	
	public boolean iAmOwner(int projectId,String agencyName) {
		String sql="SELECT COUNT(*) as conta FROM progetto WHERE id="+ projectId +" and azienda='"+ agencyName +"'";
		
		conn = new Connect();
		
		List<Vector<Object>> val = conn.query(sql, 1);
		
		conn.close();
		
		int occurrency = (int)val.get(0).get(0);
		
		if( occurrency > 0)
			return true;
		return false;
		
	}
	
	
	public void deleteProject(int projectId) {
		String deleteProjectQuery="DELETE FROM progetto WHERE id =(?)";
		String deleteFinanziamentoQuery = "DELETE FROM finanziamento WHERE progetto = (?)";
		
		try {
			PreparedStatement pstm=conn.prepareStatement(deleteProjectQuery);
			pstm.setInt(1, projectId);
			pstm.execute();
			
			PreparedStatement pstm2=conn.prepareStatement(deleteFinanziamentoQuery);
			pstm2.setInt(1, projectId);
			pstm.execute();
			
		}catch(SQLException e) {
			System.out.println(e.getMessage());
		}
	}
	
	public Vector<String> getAgency(String agencyName,String password) {
		
		Vector<String> vector = new Vector<String>();
		String str = "SELECT * FROM azienda WHERE nomeAzienda = (?) AND password =(?)";
		
		try {
			
			PreparedStatement pstm=conn.prepareStatement(str);
			pstm.setString(1, agencyName);
			pstm.setString(2, password);
			ResultSet res = pstm.executeQuery();
			
			
			vector.clear();
			
			while(res.next()) {
				vector.add(res.getString("nomeAzienda"));
				vector.add(res.getString("urlLogo"));
				vector.add(res.getString("urlSito"));
				vector.add(res.getString("indirizzo"));
				vector.add(res.getString("cap"));
			}
		}catch(SQLException e) {
			System.out.println(e.getMessage());
		}
		
		return vector;
	}
	
	public String getDescriptionProject(int id_project) {
		String str = "SELECT descrizione FROM progetto WHERE id = (?)";
		String desc = "";

		try {
					
					PreparedStatement pstm=conn.prepareStatement(str);
					pstm.setInt(1, id_project);
					ResultSet res = pstm.executeQuery();
					
					while(res.next()) {
						desc = res.getString("descrizione");
					}
					
				}catch(SQLException e) {
					System.out.println(e.getMessage());
				}
		return desc;
	}
	
	public Boolean myStake(String agencyName, int id_project) {
		
		int numeroOccorrenze = 0;
		Boolean check = false; //Non esiste un finanziamento
		
		String str = "SELECT count(*) as conta FROM finanziamento WHERE progetto = (?) and azienda = (?);";
		
		try {
			
			PreparedStatement pstm=conn.prepareStatement(str);
			pstm.setInt(1, id_project);
			pstm.setString(2, agencyName);
			ResultSet res = pstm.executeQuery();
			
			while(res.next()) {
				numeroOccorrenze=res.getInt("conta");
			}
			
		}catch(SQLException e) {
			System.out.println(e.getMessage());
		}
		
		if(numeroOccorrenze>0)
			check=true;
		
		return check;
	}
	
	
	public void deleteMyStake(int projectId,String agencyName) {

		String deleteMyStakesQuery = "DELETE FROM finanziamento WHERE progetto = (?) and azienda = (?)";
		
		try {
			PreparedStatement pstm=conn.prepareStatement(deleteMyStakesQuery);
			pstm.setInt(1, projectId);
			pstm.setString(2,agencyName);
			pstm.execute();
		}catch(SQLException e) {
			System.out.println(e.getMessage());
		}
	}
	
	public void updateStake(int stakeBudget,String agencyName,int idProgetto) {
		
		
		boolean stakePresent = myStake(agencyName, idProgetto);
		
		//Se non esiste un finanziamento per il progetto selezionato da parte dell'azienda che ha fatto il login
		if(stakePresent == false) {
			
			String insertStr = "INSERT INTO finanziamento (budget, azienda, progetto) values((?), (?), (?));";
			
			try {
				
				PreparedStatement pstm=conn.prepareStatement(insertStr);
				pstm.setInt(1,stakeBudget);
				pstm.setString(2,agencyName);
				pstm.setInt(3, idProgetto);
				pstm.executeUpdate();
				
			}catch(SQLException e) {
				System.out.println(e.getMessage());
			}
		}else {
			try {
			String updateStr = "UPDATE finanziamento SET budget = (?) WHERE progetto = (?) and azienda = (?);";
			PreparedStatement pstm=conn.prepareStatement(updateStr);
			pstm.setInt(1,stakeBudget);
			pstm.setString(3,agencyName);
			pstm.setInt(2, idProgetto);
			pstm.executeUpdate();
			}catch(Exception e) {System.out.println(e.getMessage());}
		}
	}
	
	
	
	
	
	
}
